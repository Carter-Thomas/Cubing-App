{
  "version": 3,
  "sources": ["../../../../node_modules/cubing/src/cubing/vendor/mpl/twsearch-cpp/index.js"],
  "sourcesContent": ["console.info(\"Loading twsearch v0.4.2\");\n// src/js/api.ts\nimport { Alg } from \"../../../alg\";\nasync function importOnce() {\n  const fn = (await import(\"./twsearch-BDAXZGZU.js\")).default;\n  return await fn();\n}\nvar cachedEmscriptenModule = null;\nasync function emscriptenModule() {\n  return cachedEmscriptenModule ?? (cachedEmscriptenModule = importOnce());\n}\nfunction cwrap(fn, returnType, argTypes, processReturnValue = (v) => v) {\n  const wrapped = (async () => (await emscriptenModule()).cwrap(fn, returnType, argTypes))();\n  return async (...args) => {\n    return processReturnValue((await wrapped)(...args));\n  };\n}\nvar NoSolutionError = class extends Error {\n};\nfunction parseResult(s) {\n  if (s === \"--no solution--\") {\n    throw new NoSolutionError(\"\");\n  }\n  return Alg.fromString(s);\n}\nvar stringArg = [\"string\"];\nvar setArg = cwrap(\n  \"w_arg\",\n  \"void\",\n  stringArg\n);\nvar setKPuzzleDefString = cwrap(\n  \"w_setksolve\",\n  \"void\",\n  stringArg\n);\nvar solveScramble = cwrap(\n  \"w_solvescramble\",\n  \"string\",\n  stringArg,\n  parseResult\n);\nvar solvePattern = cwrap(\n  \"w_solveposition\",\n  \"string\",\n  stringArg,\n  parseResult\n);\n\n// src/js/serialize.ts\nvar BLANK_LINE = \"\";\nvar END = \"End\";\nfunction sanitize(s) {\n  return s.replaceAll(/[^A-Za-z0-9]/g, \"_\");\n}\nfunction serializeMoveTransformation(name, t) {\n  const outputLines = [];\n  outputLines.push(`MoveTransformation ${sanitize(name)}`);\n  for (const [orbitName, orbitData] of Object.entries(t)) {\n    outputLines.push(sanitize(orbitName));\n    outputLines.push(orbitData.permutation.join(\" \"));\n    outputLines.push(orbitData.orientationDelta.join(\" \"));\n  }\n  outputLines.push(END);\n  outputLines.push(BLANK_LINE);\n  return outputLines.join(\"\\n\");\n}\nfunction serializeScramblePattern(name, t) {\n  const outputLines = [];\n  outputLines.push(`ScrambleState ${sanitize(name)}`);\n  for (const [orbitName, orbitData] of Object.entries(t)) {\n    outputLines.push(sanitize(orbitName));\n    outputLines.push(orbitData.pieces.join(\" \"));\n    const orientationEntries = [];\n    for (let i = 0; i < orbitData.orientation.length; i++) {\n      switch (orbitData.orientationMod?.[i] ?? 0) {\n        case 0: {\n          orientationEntries.push(orbitData.orientation[i]);\n          break;\n        }\n        case 1: {\n          orientationEntries.push(\"?\");\n          break;\n        }\n        default:\n          throw new Error(\"Unsupported `orientationMod` value.\");\n      }\n    }\n    outputLines.push(orientationEntries.join(\" \"));\n  }\n  outputLines.push(END);\n  outputLines.push(BLANK_LINE);\n  return outputLines.join(\"\\n\");\n}\nfunction serializeDefToTws(kpuzzle, options) {\n  let outputLines = [];\n  const def = kpuzzle.definition;\n  outputLines.push(`Name ${sanitize(def.name ?? \"CustomPuzzle\")}`);\n  outputLines.push(BLANK_LINE);\n  for (const orbitDefinition of def.orbits) {\n    outputLines.push(\n      `Set ${sanitize(orbitDefinition.orbitName)} ${orbitDefinition.numPieces} ${orbitDefinition.numOrientations}`\n    );\n  }\n  outputLines.push(BLANK_LINE);\n  outputLines.push(\"StartState\");\n  if (options?.startPattern) {\n    outputLines.push(options?.startPattern);\n  } else {\n    for (const [orbitName, orbitData] of Object.entries(def.defaultPattern)) {\n      outputLines.push(sanitize(orbitName));\n      outputLines.push(orbitData.pieces.join(\" \"));\n      const orientationEntries = [];\n      for (let i = 0; i < orbitData.orientation.length; i++) {\n        switch (orbitData.orientationMod?.[i] ?? 0) {\n          case 0: {\n            orientationEntries.push(orbitData.orientation[i]);\n            break;\n          }\n          case 1: {\n            orientationEntries.push(\"?\");\n            break;\n          }\n          default:\n            throw new Error(\"Unsupported `orientationMod` value.\");\n        }\n      }\n      outputLines.push(orientationEntries.join(\" \"));\n    }\n  }\n  outputLines.push(END);\n  outputLines.push(BLANK_LINE);\n  function include(moveName) {\n    if (options?.moveSubset) {\n      return options.moveSubset.includes(moveName);\n    } else {\n      return true;\n    }\n  }\n  for (const [moveName, moveDef] of Object.entries(def.moves)) {\n    if (include(moveName)) {\n      outputLines.push(serializeMoveTransformation(moveName, moveDef));\n    }\n  }\n  for (const [moveName, moveAlgDef] of Object.entries(\n    def.derivedMoves ?? {}\n  )) {\n    if (include(moveName)) {\n      const transformation = kpuzzle.algToTransformation(moveAlgDef);\n      outputLines.push(\n        serializeMoveTransformation(\n          moveName,\n          transformation.transformationData\n        )\n      );\n    }\n  }\n  return outputLines.join(\"\\n\");\n}\nexport {\n  NoSolutionError,\n  serializeDefToTws,\n  serializeMoveTransformation,\n   serializeScramblePattern,\n  setArg,\n  setKPuzzleDefString,\n  solveScramble,\n   solvePattern\n};\n"],
  "mappings": "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",
  "names": []
}
